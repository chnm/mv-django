# Generated by Django 5.2.4 on 2025-07-30 16:20

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models

import historical_dates.fields


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("historical_dates", "0001_initial"),
        ("locations", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Person",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, help_text="Enter first name", max_length=255
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True,
                        help_text="Enter last name first, as in: Badoer, Angelo",
                        max_length=255,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Input description of person. Example: Youth of 18 years without beard, or Madonna Anzola, wife of Lodovico",
                    ),
                ),
                (
                    "occupation",
                    models.CharField(
                        blank=True,
                        help_text="Input occupation, if known. Example: massaro. If honorific given, also input here.",
                        max_length=255,
                    ),
                ),
                (
                    "identifying_information",
                    models.CharField(blank=True, max_length=255),
                ),
                (
                    "gender",
                    models.CharField(
                        blank=True,
                        choices=[("M", "Male"), ("F", "Female"), ("U", "Unknown")],
                        help_text="Input gender: M/F",
                        max_length=1,
                    ),
                ),
                (
                    "citizenship",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("notes", models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="PersonRelationType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of this relationship.",
                        max_length=255,
                        unique=True,
                    ),
                ),
                (
                    "converse_name",
                    models.CharField(
                        blank=True,
                        help_text="The converse of the relationship, e.g., 'Child' when Person is 'Parent'.\n        Leave blank if the converse is identical (for example, 'Spouse' or 'Business Partner').",
                        max_length=255,
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("I", "Immediate family relations"),
                            ("E", "Extended family"),
                            ("M", "Relatives by marriage"),
                            ("B", "Business and property relationships"),
                            ("A", "Ambiguity"),
                        ],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "Person-Person relationship",
                "verbose_name_plural": "Person-Person relationships",
            },
        ),
        migrations.CreateModel(
            name="Weapon",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("definition", models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name="WeaponCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name="Event",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the event, example: feast of the Ascension, wedding of Giovanni Grimani",
                        max_length=255,
                    ),
                ),
                (
                    "event_type",
                    models.CharField(
                        blank=True,
                        help_text="Type of event, example: feast day, wedding, procession, market day",
                        max_length=100,
                    ),
                ),
                (
                    "date",
                    models.DateField(
                        blank=True, help_text="Date of the event if known", null=True
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Additional details about the event"
                    ),
                ),
                (
                    "historical_date",
                    historical_dates.fields.HistoricalDateField(
                        blank=True,
                        help_text="Historical date representation if uncertain",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="historical_dates.historicaldate",
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        blank=True,
                        help_text="Primary location where the event took place",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="locations.location",
                    ),
                ),
            ],
            options={
                "verbose_name": "Connected Event",
                "verbose_name_plural": "Connected Events",
            },
        ),
        migrations.CreateModel(
            name="PersonRelation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("notes", models.TextField(blank=True)),
                (
                    "from_person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="to_person",
                        to="mapping_violence.person",
                    ),
                ),
                (
                    "to_person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="from_person",
                        to="mapping_violence.person",
                        verbose_name="Person",
                    ),
                ),
                (
                    "type",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="mapping_violence.personrelationtype",
                        verbose_name="Relation",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="person",
            name="relationships",
            field=models.ManyToManyField(
                related_name="related_to",
                through="mapping_violence.PersonRelation",
                to="mapping_violence.person",
                verbose_name="Related People",
            ),
        ),
        migrations.CreateModel(
            name="Crime",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "number",
                    models.CharField(
                        blank=True,
                        help_text="Input number of case, e.g. 001",
                        max_length=50,
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "crime",
                    models.CharField(
                        blank=True,
                        help_text="Input type of crime according to modern taxonomy, e.g., assault, homicide, battery",
                        max_length=255,
                        verbose_name="Crime",
                    ),
                ),
                (
                    "description_of_case",
                    models.TextField(
                        blank=True,
                        help_text="Description of Case as presented, eg: Giovanni Grimani is accused of assaulting an unnamed servant in the streets of Venice due to malice and a bad nature.",
                        verbose_name="Description of Case",
                    ),
                ),
                (
                    "court",
                    models.CharField(
                        blank=True,
                        help_text="Input court of first instance that generated case, e.g. Giudice del Maleficio Verona. If unknown, input unknown",
                        max_length=255,
                    ),
                ),
                (
                    "court_classification",
                    models.CharField(
                        blank=True,
                        help_text="Input classification of crime according to court records (often different from modern taxonomy), for example: assault with a gun, battery with fists, pre-meditated homicide, violent sexual assault, infanticide",
                        max_length=255,
                    ),
                ),
                (
                    "trial_phase",
                    models.CharField(
                        blank=True,
                        help_text="Input trial phase, if known, example: denunciation, quarrel, summons, sentence",
                        max_length=255,
                    ),
                ),
                (
                    "arbitration",
                    models.BooleanField(
                        default=False,
                        help_text="Did parties submit to arbitration (e.g. peace agreement or fine?). If so, check Y.",
                        verbose_name="Arbitration (Y/N)",
                    ),
                ),
                (
                    "sentence",
                    models.TextField(
                        blank=True,
                        help_text="Input sentence of convicted if known. Examples: death penalty, exile, fine. If multiple penalties, input all in field separated by commas.",
                    ),
                ),
                (
                    "sentence_enforced",
                    models.BooleanField(
                        default=False,
                        help_text="If sentence was carried about, check Y. If not, leave unchecked.",
                        verbose_name="Sentence Enforced (Y/N)",
                    ),
                ),
                (
                    "date",
                    models.DateField(
                        help_text="Input modern format of date. Example: October 23, 1615 should be converted to 1615-10-23",
                        verbose_name="Date (Modern Format)",
                    ),
                ),
                (
                    "year",
                    models.CharField(
                        blank=True,
                        help_text="Input year of crime (not year of document) - auto-populated from date field",
                        max_length=255,
                    ),
                ),
                (
                    "month",
                    models.CharField(
                        blank=True,
                        help_text="Input month of crime - auto-populated from date field",
                        max_length=255,
                    ),
                ),
                (
                    "day",
                    models.CharField(
                        blank=True,
                        help_text="Input numeric day of crime - auto-populated from date field",
                        max_length=255,
                    ),
                ),
                (
                    "day_of_week",
                    models.CharField(
                        blank=True,
                        help_text="Input day of week, example: Monday, Thursday - auto-populated from date field",
                        max_length=20,
                    ),
                ),
                (
                    "time",
                    models.CharField(
                        blank=True,
                        help_text="Input specific time if known",
                        max_length=255,
                        verbose_name="Time",
                    ),
                ),
                ("time_of_day", models.CharField(blank=True, max_length=255)),
                (
                    "liturgical_occasion",
                    models.CharField(
                        blank=True,
                        help_text="Input liturgical occasion if relevant",
                        max_length=255,
                    ),
                ),
                (
                    "victim_description",
                    models.TextField(
                        blank=True,
                        help_text="Input description of victim. Example: Youth of 18 years without beard",
                    ),
                ),
                (
                    "assailant_description",
                    models.TextField(
                        blank=True,
                        help_text="Input assailant description. Example: Madonna Anzola, wife of Lodovico",
                    ),
                ),
                (
                    "motive",
                    models.CharField(
                        blank=True,
                        help_text="Input description of motive as given, if known: example: mortal hatred",
                        max_length=255,
                    ),
                ),
                (
                    "relationship",
                    models.CharField(
                        blank=True,
                        help_text="Input relationship between victim and assailant, if known. Example: husband and wife, friend, enemy",
                        max_length=255,
                    ),
                ),
                (
                    "sestiere",
                    models.CharField(
                        blank=True,
                        help_text="If Venetian crime, input neighborhood",
                        max_length=255,
                    ),
                ),
                (
                    "description_of_location",
                    models.TextField(
                        blank=True,
                        help_text="Input description of location if given. Example: in front of the Madonna di Miracoli, on the bridge of sighs",
                    ),
                ),
                (
                    "fatality",
                    models.BooleanField(
                        default=False,
                        help_text="If the crime was fatal, check Y. If not, leave unchecked.",
                        verbose_name="Fatality (Y/N)",
                    ),
                ),
                (
                    "violence_caused_death",
                    models.BooleanField(
                        default=False,
                        verbose_name="Did the crime cause the victim to die?",
                    ),
                ),
                (
                    "pardoned",
                    models.BooleanField(
                        default=False, verbose_name="Was the perpetrator pardoned?"
                    ),
                ),
                (
                    "convicted",
                    models.BooleanField(
                        default=False, verbose_name="Was the perpetrator convicted?"
                    ),
                ),
                (
                    "accord",
                    models.BooleanField(
                        default=False,
                        verbose_name="Did the case end with a peace accord?",
                    ),
                ),
                (
                    "accord_date",
                    models.DateField(
                        blank=True,
                        help_text="If an accord was reached, what was the date?",
                        null=True,
                    ),
                ),
                ("source", models.CharField(blank=True, max_length=255)),
                (
                    "archival_location",
                    models.CharField(
                        blank=True,
                        help_text="Input archival location of file, example: Archivio di Stato Verona, Giudice del Maleficio",
                        max_length=500,
                    ),
                ),
                (
                    "reference",
                    models.CharField(
                        blank=True,
                        help_text="Input any bibliographic references to case, if available",
                        max_length=500,
                    ),
                ),
                (
                    "date_of_entry",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date case entered into database - automatically populated",
                        verbose_name="Date of Entry",
                    ),
                ),
                (
                    "address",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="locations.location",
                    ),
                ),
                (
                    "historical_date",
                    historical_dates.fields.HistoricalDateField(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="historical_dates.historicaldate",
                    ),
                ),
                (
                    "input_by",
                    models.ForeignKey(
                        help_text="Person who entered record. Example: Last Name, first initial: Madden, A",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Input by (user)",
                    ),
                ),
                (
                    "connected_event",
                    models.ForeignKey(
                        blank=True,
                        help_text="Select connected ceremonial event if applicable (feast day, wedding, procession, etc.)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="mapping_violence.event",
                    ),
                ),
                (
                    "judge",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="mapping_violence.person",
                    ),
                ),
                (
                    "perpetrator",
                    models.ManyToManyField(
                        help_text="Select assailant(s). Names should be entered as: lastname, first. Example: Badoer, Francesco.",
                        related_name="crime_perpetrator",
                        to="mapping_violence.person",
                        verbose_name="Assailant",
                    ),
                ),
                (
                    "victim",
                    models.ManyToManyField(
                        help_text="Select victim(s). Names should be entered as: last name, first name. Example: Badoer, Angelo",
                        related_name="crime_victim",
                        to="mapping_violence.person",
                    ),
                ),
                (
                    "weapon",
                    models.ForeignKey(
                        help_text="Input type of weapon if known according to taxonomy (firearm, edged weapon, blunt instrument, hands)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="mapping_violence.weapon",
                        verbose_name="Type of Weapon",
                    ),
                ),
            ],
            options={
                "verbose_name": "Violence Event",
            },
        ),
        migrations.AddField(
            model_name="weapon",
            name="category",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="mapping_violence.weaponcategory",
            ),
        ),
        migrations.CreateModel(
            name="Witness",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("claims", models.TextField(blank=True)),
                ("notes", models.TextField(blank=True)),
                (
                    "crime",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="witnesses",
                        to="mapping_violence.crime",
                    ),
                ),
                (
                    "date_of_testimony",
                    historical_dates.fields.HistoricalDateField(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="historical_dates.historicaldate",
                    ),
                ),
                (
                    "name",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="mapping_violence.person",
                    ),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="personrelation",
            constraint=models.UniqueConstraint(
                fields=("type", "from_person", "to_person"),
                name="unique_person_relation_by_type",
            ),
        ),
        migrations.AddConstraint(
            model_name="personrelation",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    ("from_person", models.F("to_person")), _negated=True
                ),
                name="mapping_violence_personrelation_prevent_self_relationship",
            ),
        ),
    ]
